set(CMAKE_SYSTEM_NAME Android)

set(ANDROID_COMPILER_VERSION 4.9)
get_filename_component(ANDROID_TOOLCHAIN "${ANDROID_TOOLCHAIN}" ABSOLUTE)
set(ANDROID_TOOLCHAIN "${ANDROID_TOOLCHAIN}" CACHE INTERNAL "Android toolchain path" FORCE)

if (NOT DEFINED ANDROID_STL)
    set(ANDROID_STL "gnustl_static")
endif ()

set(__tool_name "")
if (ANDROID_ABI STREQUAL "armeabi-v7a")
    set(CMAKE_SYSTEM_PROCESSOR "armv7-a")
    set(__llvm_triple "armv7-none-linux-androideabi")
    set(__tool_name "arm-linux-androideabi")
    set(__armv7 true)
elseif (ANDROID_ABI STREQUAL "arm64-v8a")
    set(CMAKE_SYSTEM_PROCESSOR "aarch64")
    set(__llvm_triple "aarch64-none-linux-android")
    set(__tool_name "aarch64-linux-android")
    set(__armv8 true)
elseif (ANDROID_ABI STREQUAL "x86")
    set(CMAKE_SYSTEM_PROCESSOR "i686")
    set(__llvm_triple "i686-none-linux-android")
    set(__tool_name "i686-linux-android")
endif ()

set(__tool_suffix "")
if (CMAKE_HOST_WIN32)
    set(__tool_suffix ".exe")
endif ()

set(CMAKE_SYSROOT "${ANDROID_TOOLCHAIN}/sysroot" CACHE PATH "Sysroot")
set(CMAKE_C_COMPILER "${ANDROID_TOOLCHAIN}/bin/${__tool_name}-clang${__tool_suffix}" CACHE PATH "C Compiler")
set(CMAKE_CXX_COMPILER "${ANDROID_TOOLCHAIN}/bin/${__tool_name}-clang++${__tool_suffix}" CACHE PATH "C++ Compiler")
set(CMAKE_C_COMPILER_TARGET "${__llvm_triple}" CACHE INTERNAL "C LLVM triple")
set(CMAKE_CXX_COMPILER_TARGET "${__llvm_triple}" CACHE INTERNAL "C++ LLVM triple")

set(CMAKE_C_FLAGS "-Qunused-arguments -fdata-sections -ffunction-sections -fsigned-char -funwind-tables -no-canonical-prefixes -fstack-protector")
set(CMAKE_C_FLAGS_DEBUG "-fno-omit-frame-pointer -fno-strict-aliasing -O0 -g -DDEBUG -D_DEBUG")
set(CMAKE_C_FLAGS_RELEASE "-fomit-frame-pointer -fstrict-aliasing -Os -DNDEBUG")
set(ANDROID_LINKER_FLAGS "-Wl,--gc-sections -Wl,-s -Wl,--no-undefined -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now")

if (__armv7)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=armv7-a -mfloat-abi=softfp -mfpu=neon")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -marm")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -mthumb")
    set(ANDROID_LINKER_FLAGS "${ANDROID_LINKER_FLAGS} -Wl,--fix-cortex-a8")
elseif (__armv8)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfpu=neon")
endif (__armv7)

if (NOT "${ANDROID_STL}" MATCHES "^(none|gnustl_static|gnustl_shared)$")
    message(FATAL_ERROR "ANDROID_STL is set to invalid value \"${ANDROID_STL}\".
The possible values are:
  none           -> Do not configure the runtime.
  gnustl_static  -> (default) Use the GNU STL as a static library.
  gnustl_shared  -> Use the GNU STL as a shared library.
")
endif ()

if (NOT ANDROID_STL STREQUAL "none")
    set(ANDROID_STL_INCLUDE_DIRS "${ANDROID_TOOLCHAIN}/include/c++/${ANDROID_COMPILER_VERSION}")
    if (__armv7 AND EXISTS "${ANDROID_STL_INCLUDE_DIRS}/${__tool_name}/${CMAKE_SYSTEM_PROCESSOR}/bits")
        list(APPEND ANDROID_STL_INCLUDE_DIRS "${ANDROID_STL_INCLUDE_DIRS}/${__tool_name}/${CMAKE_SYSTEM_PROCESSOR}")
    else ()
        list(APPEND ANDROID_STL_INCLUDE_DIRS "${ANDROID_STL_INCLUDE_DIRS}/${__tool_name}")
    endif ()
    if (__armv7 AND EXISTS "${ANDROID_TOOLCHAIN}/${__tool_name}/lib/${CMAKE_SYSTEM_PROCESSOR}/thumb/libstdc++.a")
        set(__libstl "${ANDROID_TOOLCHAIN}/${__tool_name}/lib/${CMAKE_SYSTEM_PROCESSOR}/thumb")
    elseif (EXISTS "${ANDROID_TOOLCHAIN}/${__tool_name}/lib/libstdc++.a")
        set(__libstl "${ANDROID_TOOLCHAIN}/${__tool_name}/lib")
    endif ()
    if (__libstl)
        set(__libsupcxx "${__libstl}/libsupc++.a")
        set(__libstl "${__libstl}/libstdc++.a")
    endif ()

    if (ANDROID_STL STREQUAL "gnustl_shared")
        if (__armv7 AND EXISTS "${ANDROID_TOOLCHAIN}/${__tool_name}/lib/${CMAKE_SYSTEM_PROCESSOR}/libgnustl_shared.so")
            set(__libstl "${ANDROID_TOOLCHAIN}/${__tool_name}/lib/${CMAKE_SYSTEM_PROCESSOR}/libgnustl_shared.so")
        elseif (EXISTS "${ANDROID_TOOLCHAIN}/${__tool_name}/lib/libgnustl_shared.so")
            set(__libstl "${ANDROID_TOOLCHAIN}/${__tool_name}/lib/libgnustl_shared.so")
        endif ()
    endif ()
endif ()

if (EXISTS "${__libstl}" OR EXISTS "${__libsupcxx}")
    set(CMAKE_CXX_CREATE_SHARED_LIBRARY "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
    set(CMAKE_CXX_CREATE_SHARED_MODULE "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
    set(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_C_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
endif ()

if (EXISTS "${__libstl}" OR EXISTS "${__libsupcxx}")
    if (EXISTS "${__libstl}")
        set(CMAKE_CXX_CREATE_SHARED_LIBRARY "${CMAKE_CXX_CREATE_SHARED_LIBRARY} \"${__libstl}\"")
        set(CMAKE_CXX_CREATE_SHARED_MODULE "${CMAKE_CXX_CREATE_SHARED_MODULE} \"${__libstl}\"")
        set(CMAKE_CXX_LINK_EXECUTABLE "${CMAKE_CXX_LINK_EXECUTABLE} \"${__libstl}\"")
    endif ()
    if (EXISTS "${__libsupcxx}")
        set(CMAKE_CXX_CREATE_SHARED_LIBRARY "${CMAKE_CXX_CREATE_SHARED_LIBRARY} \"${__libsupcxx}\"")
        set(CMAKE_CXX_CREATE_SHARED_MODULE "${CMAKE_CXX_CREATE_SHARED_MODULE} \"${__libsupcxx}\"")
        set(CMAKE_CXX_LINK_EXECUTABLE "${CMAKE_CXX_LINK_EXECUTABLE} \"${__libsupcxx}\"")
        # C objects:
        set(CMAKE_C_CREATE_SHARED_LIBRARY "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
        set(CMAKE_C_CREATE_SHARED_MODULE "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
        set(CMAKE_C_LINK_EXECUTABLE "<CMAKE_C_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
        set(CMAKE_C_CREATE_SHARED_LIBRARY "${CMAKE_C_CREATE_SHARED_LIBRARY} \"${__libsupcxx}\"")
        set(CMAKE_C_CREATE_SHARED_MODULE "${CMAKE_C_CREATE_SHARED_MODULE} \"${__libsupcxx}\"")
        set(CMAKE_C_LINK_EXECUTABLE "${CMAKE_C_LINK_EXECUTABLE} \"${__libsupcxx}\"")
    endif ()
endif ()

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}" CACHE STRING "C flags")
set(CMAKE_C_FLAGS_DEBUG "${ANDROID_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS_DEBUG}" CACHE STRING "C Debug flags")
set(CMAKE_C_FLAGS_RELEASE "${ANDROID_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELEASE}" CACHE STRING "C Release flags")
set(CMAKE_CXX_FLAGS "${ANDROID_C_FLAGS} ${CMAKE_C_FLAGS}" CACHE STRING "C++ flags")
set(CMAKE_CXX_FLAGS_DEBUG "${ANDROID_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS_DEBUG}" CACHE STRING "C++ Debug flags")
set(CMAKE_CXX_FLAGS_RELEASE "${ANDROID_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELEASE}" CACHE STRING "C++ Release flags")
set(CMAKE_SHARED_LINKER_FLAGS "${ANDROID_LINKER_FLAGS}" CACHE STRING "Shared linker flags")
set(CMAKE_MODULE_LINKER_FLAGS "${ANDROID_LINKER_FLAGS}" CACHE STRING "Module linker flags")
set(CMAKE_EXE_LINKER_FLAGS "${ANDROID_LINKER_FLAGS} -Wl,-z,nocopyreloc" CACHE STRING "Executable linker flags")

set(CMAKE_SHARED_LINKER_FLAGS "${ANDROID_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS "${ANDROID_LINKER_FLAGS} ${CMAKE_MODULE_LINKER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${ANDROID_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS}")

set(CMAKE_FIND_ROOT_PATH "${ANDROID_TOOLCHAIN}" "${CMAKE_SYSROOT}" ${ANDROID_STL_INCLUDE_DIRS})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)